#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: ejdennis
PURPOSE: to use transformix to take a tif that's in FIXED volume space and use existing elastix registration (moving to fixed) to get it into MOVING volume space
note this is often backwards of people's intuition! Example: if you want to take the WHS_annotations.tif and get it in PRA space, you'd want to use the elastix files that you generated by using PRA as the moving image and WHS as the fixed image

INPUTS: 
1. elastix_files: a string containing a full path to a folder of elastix files
2. fixed_tif: a string containing a full path to the fixed image (i.e. what file you want to align TO)
3. input_tif: a string containing a full path to a tiff or tif file. 
4. output_dir: a string containing a full path to a directory where you want your results to be stored

OPTIONAL INPUTS:
5. mult: defaults to 1.4, use whatever multiplier was used for the original alignment
OUTPUTS:
a directory full of outputs, most useful is the result.tif file produced

"""

import os, cv2, shutil, sys
import numpy as np
import tifffile as tif
import SimpleITK as sitk
import multiprocessing as mp
from skimage.transform import resize
sys.path.append("utils")
from utils.registration import transformix_command_line_call


if __name__ == "__main__":

    try:
        elastix_files=str(sys.argv[1])
        if os.path.isdir(elastix_files):
            print("using {} folder of elastix files".format(elastix_files))
        else:
            print("the first input must be a string containing a full path to a folder of elastix files. You provided {} which is not a directory".format(elastix_files))
    except:
            print("the first input must be a string containing a full path to a folder of elastix files")

    try:
        fixed_tif = str(sys.argv[2])
        if os.path.isfile(fixed_tif):
            print("using fixed tiff: {}".format(fixed_tif))
    except:
        print("the second input must be a string with a full path to the fixed tiff volume")
 
    try:
        input_tif = str(sys.argv[3])
        if os.path.isfile(input_tif):
            if "tif" in input_tif:
                print("warping {} from fixed volume space to moving volume space, usually formatted as mv_to_fx, using this folder: {}".format(tif_in_fixed_volume,elastix_files))
        else:
            print("check tif file {}".format(input_tif))
    except:
        print("second input must be a string containing a full path to a tiff or tif file")

    try:
        output_dir = str(sys.argv[4])
        if not os.path.isdir(output_dir):
            os.mkdir(output_dir)
    except:
        print("third input must be a string containing a full path to a folder you'd like the outputs stored in, and must exist or have an existing parent directory")

    if len(sys.argv) > 5:
        try:
            mult=float(sys.argv[5])
        except:
            print("mult {} could not be converted to a float, using default 1.4".format(mult))
            mult=float(1.4)
    else:
        mult=float(1.4)
    print('mult is {}'.format(mult))
    fixed=tif.imread(fixed_tif)
    moving = tif.imread(input_tif)
    print("\nzooming...")
    print("shapes of fixed, moving, then resized")
    print(np.shape(fixed))
    print(np.shape(moving))
    zf=round(fixed.shape[0]*mult)
    xf=round(fixed.shape[1]*mult)
    yf=round(fixed.shape[2]*mult)
    print(zf,xf,yf)
    tif_resized= resize(moving, (zf,xf,yf),anti_aliasing=False, order=0,preserve_range=True).astype('uint16')
    print("if you have issues with the output, check these numbers carefully. first the shape of the resized tiff {} and then the max value of the resized tif {}".format(np.shape(tif_resized),np.max(tif_resized.astype('int16'))))
    tif.imsave(os.path.join(output_dir,"resized.tif"),tif_resized.astype('int16'))

    transformfiles=[]

    for file in os.listdir(elastix_files):
            if "TransformParam" in file:
                transformfiles.append(os.path.join(elastix_files, file))
            transformfiles.sort()
            print("transformfiles {}".format(transformfiles))

    # now use transformix
    transformix_command_line_call(os.path.join(output_dir,"resized.tif"),output_dir,transformfiles[-1])



